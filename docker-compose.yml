# version: '3.8'

# services:
#   # MySQL Database
#   db:
#     image: mysql:8.0
#     container_name: portal_db
#     restart: unless-stopped
#     environment:
#       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
#       MYSQL_DATABASE: ${DB_NAME}
#       MYSQL_USER: ${DB_USER}
#       MYSQL_PASSWORD: ${DB_PASSWORD}
#     ports:
#       - "3306:3306"
#     volumes:
#       - db_data:/var/lib/mysql
#       - ./mysql-init:/docker-entrypoint-initdb.d
#     networks:
#       - portal_network
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
#       interval: 30s
#       timeout: 10s
#       retries: 5

#   # Backend API
#   backend:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: portal_backend
#     restart: unless-stopped
#     environment:
#       NODE_ENV: ${NODE_ENV}
#       PORT: ${PORT}
#       DB_HOST: db
#       DB_PORT: ${DB_PORT}
#       DB_USER: ${DB_USER}
#       DB_PASSWORD: ${DB_PASSWORD}
#       DB_NAME: ${DB_NAME}
#       JWT_SECRET: ${JWT_SECRET}
#       JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
#       FRONTEND_URL: ${FRONTEND_URL}
#     ports:
#       - "3000:3000"
#     depends_on:
#       db:
#         condition: service_healthy
#     networks:
#       - portal_network
#     volumes:
#       - ./logs:/app/logs
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   # Frontend
#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     container_name: portal_frontend
#     restart: unless-stopped
#     environment:
#       REACT_APP_API_URL: http://localhost:3000/api
#     ports:
#       - "3001:80"
#     depends_on:
#       - backend
#     networks:
#       - portal_network

#   # Adminer (Database Management) - Optional
#   adminer:
#     image: adminer
#     container_name: portal_adminer
#     restart: unless-stopped
#     ports:
#       - "8080:8080"
#     depends_on:
#       - db
#     networks:
#       - portal_network

# volumes:
#   db_data:
#     driver: local

# networks:
#   portal_network:
#     driver: bridge

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: portal_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - portal_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portal_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - portal_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Database Initialization
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portal_db_init
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - portal_network
    command: ["sh", "-c", "sleep 10 && npm run migrate && npm run seed"]
    restart: "no"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: portal_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
    ports:
      - "3001:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - portal_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Adminer (Database Management) - Optional
  adminer:
    image: adminer
    container_name: portal_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - portal_network
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  db_data:
    driver: local

networks:
  portal_network:
    driver: bridge